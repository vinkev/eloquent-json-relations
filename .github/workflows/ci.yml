name: CI

on: [ push, pull_request ]

jobs:
  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php: [ 8.3, 8.2 ]
        database: [ mysql, mariadb, pgsql, sqlite, sqlsrv ]
        release: [ stable, lowest ]
        include:
          - php: 8.3
            release: stable
<<<<<<< HEAD
            coverage: xdebug
          - database: sqlsrv
            pdo_suffix: -5.9.0preview1

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 3306
      mariadb:
        image: mariadb:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 3306
      pgsql:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432/tcp
      sqlsrv:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Password!
        options: >-
          --name sqlsrv
          --health-cmd "echo quit | /opt/mssql-tools/bin/sqlcmd -S 127.0.0.1 -l 1 -U sa -P Password!"
        ports:
          - 1433
=======
            coverage: true
>>>>>>> fc9dc9c3bb6803b562bb82bc47397ddeaa737846

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/composer/files
          key: php-${{ matrix.php }}-composer-${{ hashFiles('composer.json') }}
      - name: Start database container
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up --wait ${{ matrix.database }}
        if: matrix.database != 'sqlite'
      - name: Create SQL Server database
        run: docker compose exec sqlsrv /opt/mssql-tools/bin/sqlcmd -S 127.0.0.1 -U sa -P Password! -Q 'create database [test]'
        if: matrix.database == 'sqlsrv'
      - name: Install dependencies
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm php${{ matrix.php }} \
            composer update --no-interaction --no-progress --prefer-dist --prefer-${{ matrix.release }}
      - name: Run tests
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run -e DB_CONNECTION=${{ matrix.database }} \
            --rm php${{ matrix.php }}${{ env.XDEBUG }} vendor/bin/phpunit ${{ env.COVERAGE }}
        env:
          COVERAGE: ${{ matrix.coverage && '--coverage-clover=coverage.xml' || '' }}
          XDEBUG: ${{ matrix.coverage && '-xdebug' || '' }}
      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.coverage && env.CODECOV_TOKEN
